import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';

const pool = new Pool({
  host: process.env.DB_HOST || 'dpg-d2lhhgh5pdvs73anravg-a.oregon-postgres.render.com',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'shababna',
  user: process.env.DB_USER || 'shababna_user',
  password: process.env.DB_PASSWORD || 'mWiirXAZ4L7jZNoG1TQOGePRaVkEZgL8',
  ssl: {
    rejectUnauthorized: false,
    require: true
  }
});

async function setupPostgreSQL() {
  try {
    console.log('๐ ุจุฏุก ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช PostgreSQL...');

    // ูุฑุงุกุฉ ููู schema.sql
    const schemaPath = path.join(process.cwd(), 'server', 'db', 'schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');

    // ุชูููุฐ ุฃูุงูุฑ SQL
    const client = await pool.connect();

    // ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
    try {
      await client.query('CREATE DATABASE shababna');
      console.log('โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช shababna');
    } catch (error) {
      if (error.code === '42P04') {
        console.log('โน๏ธ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฌูุฏุฉ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    // ุฅุบูุงู ุงูุงุชุตุงู ูุฅูุดุงุก ุงุชุตุงู ุฌุฏูุฏ ููุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุฏุฏุฉ
    client.release();

    const dbPool = new Pool({
      host: process.env.DB_HOST || 'dpg-d2lhhgh5pdvs73anravg-a.oregon-postgres.render.com',
      port: process.env.DB_PORT || 5432,
      database: 'shababna',
      user: process.env.DB_USER || 'shababna_user',
      password: process.env.DB_PASSWORD || 'mWiirXAZ4L7jZNoG1TQOGePRaVkEZgL8',
      ssl: {
        rejectUnauthorized: false,
        require: true
      }
    });

    const dbClient = await dbPool.connect();

    // ุชูููุฐ schema ูุน ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
    try {
      await dbClient.query(schema);
      console.log('โ ุชู ุชูููุฐ schema ุจูุฌุงุญ');
    } catch (error) {
      if (error.code === '42P07') {
        console.log('โน๏ธ ุงูุฌุฏุงูู ูุงูููุงุฑุณ ููุฌูุฏุฉ ุจุงููุนู');
      } else {
        throw error;
      }
    }

    // ุฅุฏุฎุงู ุจูุงูุงุช ุชุฌุฑูุจูุฉ
    const seedData = `
      INSERT INTO users (first_name, last_name, email, password, role) VALUES
      ('ุฃุญูุฏ', 'ูุญูุฏ', 'admin@shababna.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin'),
      ('ูุงุทูุฉ', 'ุนูู', 'user@shababna.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'user')
      ON CONFLICT (email) DO NOTHING;

            INSERT INTO events (title, description, start_date, end_date, location, max_attendees, category, status) VALUES
      ('ูุฑุดุฉ ุชุทููุฑ ุงูููุงุฑุงุช ุงูููุงุฏูุฉ', 'ูุฑุดุฉ ุชูุงุนููุฉ ูุชุนูู ุงูููุงุฑุงุช ุงูููุงุฏูุฉ ุงูุฃุณุงุณูุฉ', '2024-02-15', '2024-02-15', 'ูุฑูุฒ ุงูุดุจุงุจ', 50, 'workshop', 'upcoming'),
      ('ูุคุชูุฑ ุงูุชูููููุฌูุง ุงูุญุฏูุซุฉ', 'ูุคุชูุฑ ุญูู ุฃุญุฏุซ ุงูุชุทูุฑุงุช ูู ูุฌุงู ุงูุชูููููุฌูุง', '2024-03-01', '2024-03-01', 'ูุงุนุฉ ุงููุคุชูุฑุงุช', 200, 'conference', 'upcoming')
      ON CONFLICT DO NOTHING;

      INSERT INTO programs (title, description, start_date, end_date) VALUES
      ('ุจุฑูุงูุฌ ุชุทููุฑ ุงูุดุจุงุจ', 'ุจุฑูุงูุฌ ุดุงูู ูุชุทููุฑ ููุงุฑุงุช ุงูุดุจุงุจ', '2024-01-01', '2024-12-31'),
      ('ูุดุฑูุน ุงูุตุญุฉ ุงููุฌุชูุนูุฉ', 'ูุดุฑูุน ูุชุญุณูู ุงูุตุญุฉ ูู ุงููุฌุชูุน', '2024-01-01', '2024-12-31')
      ON CONFLICT DO NOTHING;
    `;

    await dbClient.query(seedData);
    console.log('โ ุชู ุฅุฏุฎุงู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ');

    dbClient.release();
    await dbPool.end();

    console.log('๐ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช PostgreSQL ุจูุฌุงุญ!');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  }
}

setupPostgreSQL();
