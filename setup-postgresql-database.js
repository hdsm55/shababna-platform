import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

// ุฅุนุฏุงุฏ ุงุชุตุงู PostgreSQL ููุฅูุดุงุก ุงูุฃููู
const pool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: 'shababna', // ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ
    password: process.env.DB_PASSWORD || 'password',
    port: process.env.DB_PORT || 5432,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function setupDatabase() {
    const client = await pool.connect();

    try {
        console.log('๐ง ุจุฏุก ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช PostgreSQL...');

        // ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
        try {
            await client.query('CREATE DATABASE shababna_db');
            console.log('โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช shababna_db');
        } catch (error) {
            if (error.code === '42P04') {
                console.log('โน๏ธ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฌูุฏุฉ ุจุงููุนู');
            } else {
                console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
                return;
            }
        }

    } finally {
        client.release();
    }

    // ุฅุบูุงู ุงูุงุชุตุงู ูุฅุนุงุฏุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
    await pool.end();

    // ุฅูุดุงุก ุงุชุตุงู ุฌุฏูุฏ ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
    const newPool = new Pool({
        user: process.env.DB_USER || 'postgres',
        host: process.env.DB_HOST || 'localhost',
        database: 'shababna_db',
        password: process.env.DB_PASSWORD || 'password',
        port: process.env.DB_PORT || 5432,
        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    const newClient = await newPool.connect();

    try {
        console.log('๐ ุฅูุดุงุก ุงูุฌุฏุงูู...');

        // ุฌุฏูู ุงููุณุชุฎุฏููู
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                role VARCHAR(50) DEFAULT 'user',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('โ ุฌุฏูู ุงููุณุชุฎุฏููู');

        // ุฌุฏูู ุงููุนุงููุงุช
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS events (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                start_date DATE,
                end_date DATE,
                location VARCHAR(255),
                max_attendees INTEGER,
                attendees INTEGER DEFAULT 0,
                category VARCHAR(100),
                image_url VARCHAR(500),
                status VARCHAR(50) DEFAULT 'upcoming',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('โ ุฌุฏูู ุงููุนุงููุงุช');

        // ุฌุฏูู ุงูุจุฑุงูุฌ
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS programs (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                category VARCHAR(100) DEFAULT 'ุนุงู',
                goal_amount NUMERIC(10,2) DEFAULT 0,
                current_amount NUMERIC(10,2) DEFAULT 0,
                participants_count INTEGER DEFAULT 0,
                status VARCHAR(50) DEFAULT 'active',
                image_url VARCHAR(500),
                start_date DATE,
                end_date DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('โ ุฌุฏูู ุงูุจุฑุงูุฌ');

        // ุฌุฏูู ุงูุชุจุฑุนุงุช
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS donations (
                id SERIAL PRIMARY KEY,
                donor_name VARCHAR(255) NOT NULL,
                amount NUMERIC(10,2) NOT NULL,
                program_id INTEGER,
                payment_method VARCHAR(100),
                status VARCHAR(50) DEFAULT 'completed',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (program_id) REFERENCES programs (id)
            )
        `);
        console.log('โ ุฌุฏูู ุงูุชุจุฑุนุงุช');

        // ุฌุฏูู ุฑุณุงุฆู ุงูุชูุงุตู
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS contact_forms (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                subject VARCHAR(255),
                message TEXT NOT NULL,
                is_read BOOLEAN DEFAULT false,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('โ ุฌุฏูู ุฑุณุงุฆู ุงูุชูุงุตู');

        // ุฌุฏูู ุทูุจุงุช ุงูุงูุถูุงู
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS join_requests (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                phone VARCHAR(20),
                message TEXT,
                status VARCHAR(50) DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('โ ุฌุฏูู ุทูุจุงุช ุงูุงูุถูุงู');

        // ุฌุฏูู ุชุณุฌูู ุงููุนุงููุงุช
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS event_registrations (
                id SERIAL PRIMARY KEY,
                event_id INTEGER NOT NULL,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                phone VARCHAR(20),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (event_id) REFERENCES events (id)
            )
        `);
        console.log('โ ุฌุฏูู ุชุณุฌูู ุงููุนุงููุงุช');

        // ุฌุฏูู ุชุณุฌูู ุงูุจุฑุงูุฌ
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS program_registrations (
                id SERIAL PRIMARY KEY,
                program_id INTEGER NOT NULL,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                phone VARCHAR(20),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (program_id) REFERENCES programs (id)
            )
        `);
        console.log('โ ุฌุฏูู ุชุณุฌูู ุงูุจุฑุงูุฌ');

        // ุฌุฏูู ุฏุนู ุงูุจุฑุงูุฌ
        await newClient.query(`
            CREATE TABLE IF NOT EXISTS program_supporters (
                id SERIAL PRIMARY KEY,
                program_id INTEGER NOT NULL,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                support_type VARCHAR(50),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (program_id) REFERENCES programs (id)
            )
        `);
        console.log('โ ุฌุฏูู ุฏุนู ุงูุจุฑุงูุฌ');

        console.log('\n๐ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฌุฏุงูู:', error.message);
    } finally {
        newClient.release();
        await newPool.end();
    }
}

setupDatabase();